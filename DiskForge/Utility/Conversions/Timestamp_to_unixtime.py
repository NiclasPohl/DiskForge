import datetime
import time

months_normal = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
months_keyed = {"Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4, "May": 5, "Jun": 6, "Jul": 7, "Aug": 8, "Sep": 9, "Oct": 10,
                "Nov": 11, "Dec": 12}


def date_and_time_2_unixtime(date, time):
    """
    The function `date_and_time_2_unixtime` converts a given date and time to a Unix timestamp.
    
    :param date: The `date` parameter should be in the format 'YYYY-MM-DD'
    :param time: The `time` parameter should be in the format 'HH:MM:SS', where HH represents hours
    (00-23), MM represents minutes (00-59), and SS represents seconds (00-59). For example, '14:30:00'
    represents 2:30 PM
    :return: The function `date_and_time_2_unixtime` takes a date and time in the format 'YYYY-MM-DD'
    and 'HH:MM:SS' respectively, converts it into a datetime object, and then returns the Unix timestamp
    (number of seconds since January 1, 1970) corresponding to that date and time.
    """
    datetime_string = "{} {}".format(date, time)
    datetime_object = datetime.datetime.strptime(datetime_string, '%Y-%m-%d %H:%M:%S')
    unix_timestamp = int(datetime_object.timestamp())
    return unix_timestamp


def logfile_2_unixtime(year, timestamp):
    """
    The function `logfile_2_unixtime` converts a timestamp from a logfile event into Unix time based on
    the provided year.
    
    :param year: Year is the year in which the logfile event occurred. It is a numerical value
    representing the year (e.g., 2022)
    :param timestamp: The `timestamp` parameter should be in the format "MMM DD hh:mm:ss", where:
    :return: The function `logfile_2_unixtime` returns the Unix time for the given year and timestamp
    provided as input.
    """
    '''
    Method to Generate the Unixtime for the timestamp of a logfile event
    :param year: The year generated by either plaso or the simple approach
    :param timestamp: Follows the form MMM DD hh:mm:ss
    :return: Returns the unixtime for the given year and timestamp
    '''
    month, day, clocktime = timestamp.split(" ")
    month = months_keyed[month]
    hour, minute, second = clocktime.split(":")

    datetimeobject = datetime.datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
    unixtime = time.mktime(datetimeobject.timetuple())
    return unixtime


def unixtime2logfiletime(unixtime):
    """
    The function `unixtime2logfiletime` converts a Unix timestamp to a formatted log file time string.
    
    :param unixtime: It looks like you have provided a function `unixtime2logfiletime` that converts a
    Unix timestamp to a log file time format. However, the code snippet you shared is missing the
    definition of the `months_normal` list which seems to be used for converting the month number to its
    corresponding name
    :return: The function `unixtime2logfiletime` returns a formatted log time string in the format
    "Month Day Hour:Minute:Second".
    """
    dt = datetime.datetime.fromtimestamp(unixtime)
    date, clocktime = str(dt).split(" ")
    year, month, day = date.split("-")
    hour, minute, second = clocktime.split(":")
    month = int(month)
    month = months_normal[month - 1]
    logtime = month + " " + day + " " + clocktime
    return logtime


def unixtime2apttime(unixtime):
    """
    The function `unixtime2apttime` converts a Unix timestamp to a human-readable datetime string.
    
    :param unixtime: The `unixtime2apttime` function you provided converts a Unix timestamp to a
    datetime object and then returns the string representation of that datetime object
    :return: The function `unixtime2apttime` takes a Unix timestamp as input and converts it to a
    datetime object using the `fromtimestamp` method. It then returns a string representation of the
    datetime object.
    """
    dt = datetime.datetime.fromtimestamp(unixtime)
    return str(dt)


def time2unixtime(dateobj):
    """
    The function `time2unixtime` converts a date object to a Unix timestamp.
    
    :param dateobj: The `dateobj` parameter in the `time2unixtime` function should be a string
    representing a date and time in the format 'YYYY-MM-DD HH:MM:SS'. For example, '2022-10-31 08:30:00'
    :return: The function `time2unixtime` takes a date object in the format '%Y-%m-%d %H:%M:%S',
    converts it to a Unix timestamp (number of seconds since January 1, 1970), and returns the Unix
    timestamp as an integer.
    """
    datetime_object = datetime.datetime.strptime(dateobj, '%Y-%m-%d %H:%M:%S')
    unix_timestamp = int(datetime_object.timestamp())
    return unix_timestamp

# unixtime2logfiletime(0)

# logfile_2_unixtime("2023", "Nov 15 15:03:14")
