import re
import Utility.Other.Terminal_Commands as commando

sample_text = """
000:  Meta      0000000000   0000000000   0000000001   Primary Table (#0)
001:  -------   0000000000   0000002047   0000002048   Unallocated
002:  000:000   0000002048   0000249855   0000247808   Linux (0x83)
003:  -------   0000249856   0030233587   0029983732   Unallocated
"""


class PartitionInfo:
    partition = ""
    partition_type = ""
    start = ""
    end = ""
    length = ""
    description = ""
    sector_size = ""

    def __init__(self, partition, partition_type, start, end, length, description, sector_size):
        self.partition_num = partition
        self.partition_type = partition_type
        self.start = int(start)
        self.end = int(end)
        self.length = int(length)
        self.description = description
        self.sector_size = sector_size

#Deprecated
def mmls_extract_specific_partition(imagepath, verbose=False):
    '''
    Function for extraction the data generated by the mmls command
    :param imagepath: Path to the image file
    :param verbose: Increase verbosity
    :return:
    '''
    result = commando.mmls(imagepath)
    mmls_output = result.stdout

    # Define a regular expression pattern to match each row
    pattern = r'(\d+):\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(.+)'
    pattern2 = r"Units are in (\d+)-byte sectors"

    # Find all matches in the text
    matches = re.findall(pattern, mmls_output)
    match2 = re.search(pattern, mmls_output)
    if match2:
        sector_size = match2.group(1)
    else:
        sector_size = -1

    # Print the extracted values for each row
    for match in matches:
        partition, partition_type, start, end, length, description = match
        print(
            f"Partition: {partition}, Type: {partition_type}, Start: {start}, End: {end}, Length: {length}, Description: {description}")

    partition_num = int(input("In which Partition is the file? "))

    for match in matches:
        partition, partition_type, start, end, length, description = match
        if int(partition) == partition_num:
            return PartitionInfo(partition, partition_type, start, end, length, description,sector_size)
    print(f"Sorry your given Partition Number {partition_num} wasn't found")
    return -1


''' OLD VERSION
def mmls_extract_all_partitions(imagepath, verbose=False):
    # Running on sample values for now
    # imagepath = "/home/niclas/MasterThesisTest.img"
    command = ['mmls', imagepath]
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    mmls_output = result.stdout

    # Define a regular expression pattern to match each row
    pattern = r'(\d+):\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(.+)'
    pattern2 = r"Units are in (\d+)-byte sectors"

    # Find all matches in the text
    matches = re.findall(pattern, mmls_output)
    match2 = re.search(pattern2, mmls_output)
    if match2:
        sector_size = match2.group(1)

    partitions = []
    for match in matches:
        partition, partition_type, start, end, length, description = match
        partitions.append(PartitionInfo(partition, partition_type, start, end, length, description, sector_size))
    return partitions
'''


def mmls_extract_all_partitions(imagepath, verbose=False):
    # Running on sample values for now
    # imagepath = "/home/niclas/MasterThesisTest.img"
    # command = ['mmls', imagepath]
    # result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    """
    The mmls_extract_all_partitions function takes an imagepath as input and returns a list of PartitionInfo objects.
    The function uses the mmls command to extract information about all partitions in the image. The output from mmls is parsed using regular expressions, and each row is converted into a PartitionInfo object.
    
    :param imagepath: Specify the path to the image file
    :param verbose: Print out the output of the mmls command
    :return: A list of partitioninfo objects
    
    """
    result = commando.mmls(imagepath)
    mmls_output = result.stdout

    # Define a regular expression pattern to match each row
    pattern = re.compile(r'(\d+):\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(.+)')
    pattern2 = r"Units are in (\d+)-byte sectors"

    # Find all matches in the text
    lines = mmls_output.split('\n')
    match2 = re.search(pattern2, mmls_output)
    if match2:
        sector_size = match2.group(1)

    partitions = []
    for line in lines:
        match = pattern.match(line)
        if match:
            partition, partition_type, start, end, length, description = match.groups()
            description = description.strip()
            partitions.append(PartitionInfo(partition, partition_type, start, end, length, description, sector_size))
    return partitions


def print_partition_list(partition_list):
    """
    The print_partition_list function prints out the partition list in a readable format.
        
    
    :param partition_list: Store the partition information
    :return: A list of partition objects
    
    """
    print("\nNumber | Type | Start | End | Length | Description | Sector Size")
    for i in range(len(partition_list)):
        print(partition_list[i].partition_num + " | " + partition_list[i].partition_type,
              " | " + str(partition_list[i].start) + " | " + str(partition_list[i].end) +
              " | " + str(partition_list[i].length) + " | " + str(partition_list[i].description) + " | " + str(
                  partition_list[i].sector_size))


def print_partition(partition):
    print("\nSector Size: " + partition.sector_size)
    print("Number | Type | Start | End | Length | Description")
    print(partition.partition_num + " | " + partition.partition_type,
          " | " + str(partition.start) + " | " + str(partition.end) +
          " | " + str(partition.length) + " | " + str(partition.description))
